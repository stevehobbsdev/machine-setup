#!/usr/bin/env bash

INSTALL_DEV=false
INSTALL_APPS=false

# Version constants - update these to pin to specific versions
GO_VERSION="1.24.6"
RUBY_VERSION="3.4.5"
NODE_VERSION="24.5.0"
RUST_VERSION="1.89.0"

# Detect OS
OS="$(uname -s)"
IS_MACOS=false

if [[ "$OS" == "Darwin" ]]; then
  IS_MACOS=true
fi

# Handle command line args
for arg in "$@"; do
  case $arg in
    --dev)
      INSTALL_DEV=true
      shift
      ;;
    --apps)
      INSTALL_APPS=true
      shift
      ;;
  esac
done

# Install any development tools and programming language tools
function install-dev() {
  if [[ "$IS_MACOS" == true ]]; then
    # Install GitHub CLI
    if ! type gh &> /dev/null; then
      echo "Installing GitHub CLI"
      brew install --quiet gh
    fi

    # Install other development tools
    echo "Installing development tools with brew..."
    brew install --quiet mise docker shellcheck

    # Set up language runtimes
    if type mise &> /dev/null; then
      mise use -g go@${GO_VERSION}
      mise use -g ruby@${RUBY_VERSION}
      mise use -g node@${NODE_VERSION}
      mise use -g rust@${RUST_VERSION}
    fi
  else
    echo "Installing development tools for non-macOS system..."
    
    # Install GitHub CLI
    if ! type gh &> /dev/null; then
      echo "Installing GitHub CLI"
      if command -v apt-get &> /dev/null; then
        # Add GitHub CLI repository and install
        type -p curl >/dev/null || sudo apt-get update && sudo apt-get install curl -y
        
        # Only add keyring if not already present
        if [[ ! -f "/usr/share/keyrings/githubcli-archive-keyring.gpg" ]]; then
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
        fi
        
        # Only add repository if not already present
        if [[ ! -f "/etc/apt/sources.list.d/github-cli.list" ]]; then
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        fi
        
        sudo apt-get update && sudo apt-get install gh -y
      else
        echo "Warning: Could not install GitHub CLI automatically on this system"
      fi
    fi

    # Install other development tools
    if command -v apt-get &> /dev/null; then
      sudo apt-get update
      
      # Install docker if not already installed
      if ! type docker &> /dev/null; then
        echo "Installing docker..."
        sudo apt-get install -y docker.io
      fi
      
      # Install shellcheck if not already installed
      if ! type shellcheck &> /dev/null; then
        echo "Installing shellcheck..."
        sudo apt-get install -y shellcheck
      fi
      
      # Install mise
      if ! type mise &> /dev/null; then
        echo "Installing mise..."
        curl https://mise.run | sh
        # Add mise to PATH for current session
        export PATH="$HOME/.local/bin:$PATH"
        
        # Add ~/.local/bin to PATH in ~/.zshrc if not already added
        if ! grep -Fxq 'export PATH="$HOME/.local/bin:$PATH"' "$HOME/.zshrc"; then
          echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$HOME/.zshrc"
          echo "~/.local/bin has been added to PATH in ~/.zshrc"
        fi
      fi
      
      # Install language runtimes with mise if available
      if type mise &> /dev/null; then
        mise use -g go@${GO_VERSION}
        mise use -g ruby@${RUBY_VERSION}
        mise use -g node@${NODE_VERSION}
        mise use -g rust@${RUST_VERSION}
      else
        echo "Note: Could not install mise, language runtimes need manual installation"
      fi
      
    else
      echo "Warning: Could not install development tools automatically on this system"
    fi
  fi
  
  # Install libpq across all platforms
  if [[ "$IS_MACOS" == true ]]; then
    if ! brew list libpq &> /dev/null; then
      echo "Installing libpq on macOS..."
      brew install --quiet libpq
      # Ensure libpq binaries are linked to PATH
      brew link --force libpq
    fi
  else
    if command -v apt-get &> /dev/null; then
      echo "Installing libpq on Linux..."
      sudo apt-get update && sudo apt-get install -y libpq-dev
    else
      echo "Warning: Could not install libpq automatically on this system"
    fi
  fi
}

# Install any applications needed
function install-apps() {
  if [[ "$IS_MACOS" != true ]]; then
    echo "Error: install-apps can only be run on macOS"
    return 1
  fi

  # Browsers
  if [[ ! -d "/Applications/Google Chrome.app" ]]; then
    echo "Installing Google Chrome..."
    brew install --quiet --cask google-chrome
  fi

  # Development
  if [[ ! -d "/Applications/Visual Studio Code.app" ]]; then
    echo "Installing Visual Studio Code..."
    brew install --quiet --cask visual-studio-code
  fi
  
  if ! type pre-commit &> /dev/null; then
    echo "Installing pre-commit..."
    brew install --quiet pre-commit
  fi

  # Fun
  if [[ ! -d "/Applications/Spotify.app" ]]; then
    echo "Installing Spotify..."
    brew install --quiet --cask spotify
  fi
}

function main() {
  # make sure config dir exists
  [[ -d "$HOME/.config" ]] || mkdir "$HOME/.config"

  # Install Homebrew
  if ! type "brew" &> /dev/null; then
    if [[ "$IS_MACOS" == true ]]; then
      echo "Installing homebrew..."
      ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    else
      echo "Warning: Homebrew installation skipped (not on macOS)"
    fi
  fi

  # Install jq
  if ! type "jq" &> /dev/null; then
    echo "Installing jq"
    if [[ "$IS_MACOS" == true ]]; then
      brew install jq
    else
      # Try apt-get for Ubuntu/Debian systems
      if command -v apt-get &> /dev/null; then
        sudo apt-get update && sudo apt-get install -y jq
      else
        echo "Warning: Could not install jq automatically on this system"
      fi
    fi
  fi

  # Tools
  if [[ "$IS_MACOS" == true ]]; then
    [[ -d "/Applications/iTerm.app" ]] || brew install --cask --quiet iterm2
    
    # Install zsh plugins and tools individually
    if ! brew list zsh-autosuggestions &> /dev/null; then
      echo "Installing zsh-autosuggestions..."
      brew install --quiet zsh-autosuggestions
    fi
    
    if ! brew list zsh-syntax-highlighting &> /dev/null; then
      echo "Installing zsh-syntax-highlighting..."
      brew install --quiet zsh-syntax-highlighting
    fi
    
    if ! type starship &> /dev/null; then
      echo "Installing starship..."
      brew install --quiet starship
    fi
    
    if ! type nvim &> /dev/null; then
      echo "Installing neovim..."
      brew install --quiet neovim
    fi
  else
    echo "Warning: iTerm2 installation skipped (not on macOS)"
    # Try to install available tools on non-macOS systems
    if command -v apt-get &> /dev/null; then
      sudo apt-get update
      
      if ! type zsh &> /dev/null; then
        echo "Installing zsh..."
        sudo apt-get install -y zsh
      fi
      
      if ! type nvim &> /dev/null; then
        echo "Installing neovim..."
        sudo apt-get install -y neovim
      fi
      
      echo "Note: zsh-autosuggestions, zsh-syntax-highlighting, and starship may need manual installation on this system"
    else
      echo "Warning: Could not install tools automatically on this system"
    fi
  fi

  # Install z
  export Z_HOME="$HOME/zed"

  if [ ! -d "$Z_HOME" ]; then
    echo "Installing rupa/z"
    git clone https://github.com/rupa/z "$Z_HOME"
  else
    echo "Updating rupa/z"
    pushd "$Z_HOME" > /dev/null || exit
    git pull
    popd > /dev/null || exit
  fi

  # LazyVim setup
  if type nvim &> /dev/null; then
    if [[ ! -d "$HOME/.config/nvim" ]]; then
      echo "Setting up LazyVim..."
      # Create nvim config directory
      mkdir -p "$HOME/.config/nvim"
      
      # Clone LazyVim starter template
      git clone https://github.com/LazyVim/starter "$HOME/.config/nvim"
      
      # Remove .git directory to make it your own
      rm -rf "$HOME/.config/nvim/.git"
      
      echo "LazyVim has been installed. Run 'nvim' to complete the setup."
    else
      echo "Neovim config already exists at ~/.config/nvim"
    fi
  else
    echo "Note: Neovim not installed, skipping LazyVim setup"
  fi

  # Optional installation...
  if [ "$INSTALL_DEV" == true ]; then
    install-dev
  fi

  if [ "$INSTALL_APPS" == true ]; then
    install-apps
  fi

  # Get the full path of .bash_config in the current folder
  BASH_CONFIG_PATH="$(pwd)/.bash_config"

  # Add .bash_config to ~/.zshrc if not already added
  if ! grep -Fxq "source $BASH_CONFIG_PATH" "$HOME/.zshrc"; then
    echo "source $BASH_CONFIG_PATH" >> "$HOME/.zshrc"
    echo "$(pwd)/.bash_config has been added to ~/.zshrc"
  fi
}

# Run the installer
main
